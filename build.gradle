plugins {
    id 'maven-publish'
    id 'fabric-loom' version '1.7-SNAPSHOT' apply false

    // https://github.com/ReplayMod/preprocessor
    // https://github.com/Fallen-Breath/preprocessor
    id 'com.replaymod.preprocess' version 'SNAPSHOT'
}

preprocess {
    def mc116 = createNode('1.16.5', 1_16_05, 'yarn')
    def mc117 = createNode('1.17.1', 1_17_01, 'yarn')
    def mc118 = createNode('1.18.2', 1_18_02, 'yarn')
    def mc119 = createNode('1.19.4', 1_19_04, 'yarn')
    def mc120 = createNode('1.20', 1_20_00, 'yarn')
    def mc1201 = createNode('1.20.1', 1_20_01, 'yarn')
    def mc1202 = createNode('1.20.2', 1_20_02, 'yarn')
    def mc1203 = createNode('1.20.3', 1_20_03, 'yarn')
    def mc1204 = createNode('1.20.4', 1_20_04, 'yarn')
    def mc1205 = createNode('1.20.5', 1_20_05, 'yarn')
    def mc1206 = createNode('1.20.6', 1_20_06, 'yarn')
    def mc121 = createNode('1.21', 1_21_00, 'yarn')
    def mc1211 = createNode('1.21.1', 1_21_01, 'yarn')
    def mc1212 = createNode('1.21.2', 1_21_02, 'yarn')
    def mc1213 = createNode('1.21.3', 1_21_03, 'yarn')

    mc117.link(mc116, file('versions/mapping-1.17-1.16.txt'))
    mc118.link(mc117, file('versions/mapping-1.18-1.17.txt'))
    mc118.link(mc119, file('versions/mapping-1.18-1.19.txt'))
    mc119.link(mc120, file('versions/mapping-1.19-1.20.txt'))
    mc120.link(mc1201, file('versions/mapping-1.20-1.20.1.txt'))
    mc1201.link(mc1202, file('versions/mapping-1.20.1-1.20.2.txt'))
    mc1202.link(mc1203, file('versions/mapping-1.20.2-1.20.3.txt'))
    mc1203.link(mc1204, file('versions/mapping-1.20.3-1.20.4.txt'))
    mc1204.link(mc1205, file('versions/mapping-1.20.4-1.20.5.txt'))
    mc1205.link(mc1206, file('versions/mapping-1.20.5-1.20.6.txt'))
    mc1206.link(mc121, file('versions/mapping-1.20.6-1.21.txt'))
    mc121.link(mc1211, file('versions/mapping-1.21-1.21.1.txt'))
    mc1211.link(mc1212, file('versions/mapping-1.21.1-1.21.2.txt'))
    mc1212.link(mc1213, file('versions/mapping-1.21.2-1.21.3.txt'))
}

tasks.register('buildAndGather') {
    subprojects {
        dependsOn project.name + ':build'
    }
    doFirst {
        println 'Gathering builds'
        delete fileTree(project.projectDir.toPath().resolve('build/libs')) {
            include '*'
        }
        copy {
            subprojects {
                def libDir = project.projectDir.toPath().resolve('build/libs')
                from(libDir) {
                    include '*.jar'
                    exclude '*-dev.jar', '*-sources.jar'
                }
                into 'build/libs/'
                duplicatesStrategy DuplicatesStrategy.INCLUDE
            }
        }
    }
}
